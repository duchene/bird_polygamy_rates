#################################################################################
####Does polyandry lead to more speciation due to higher rates of molecular
#evolution? Birds##########################################################


#####analyses with Jetz tree  branch lengths for correction of variables and phylo non-independence

#The following reads a data set in MIGs PC.
#datpoly<-read.csv("C:/Documentos Maider/My research/2017 ANU/papers/polygamy vs mol evol/our data/analyses/dat_mig_66paired_molcut_081017.csv")

#The following reads a data set in DADs mac.
dat_mig_66paired_molcut_101017<-read.csv("dat_mig_66paired_molcut_101017.csv")


str(dat_mig_66paired_molcut_101017)
data<-dat_mig_66paired_molcut_101017
attach(data)

#variables

spm<-data$sprich_mono
spp<-data$sprich_poly
dsm<-data$dsmito_mono
dsp<-data$dsmito_poly
dnm<-data$dnmito_mono
dnp<-data$dnmito_poly
dndsm<-data$dndsmito_mono
dndsp<-data$dndsmito_poly
massmalem<-data$M_mass_mono
massmalep<-data$M_mass_poly
massfemm<-data$F_mass_mono
massfemp<-data$F_mass_poly

meanweight<- rowMeans(cbind(data$weights_poly,data$weights_mono))

######### 1. Independent contrasts regression to test whether there is an association 
#between speciation, molecular evolution and body mass#####

## To randomize the direction of the comparison between variables in sisters##
### =subtraction direction######


### we need to create a table with severl results 100 times, to check whether
###the trasnformation done for the variables related to the branch length
###(See sqrt of overall below), is correlated with the difference between mono and poly
### in each variable. If they are correlated, we need to use a different trasnformation 
### of the varibles in relation to branch lenght.


#@also, we have to check if the absolute difference is correlated to the mean of each variable

# The following matrix has the results for the model, then the tests for normality etc.

resultsmat <- matrix(NA, nrow = 100, ncol = 18)
colnames(resultsmat) <- c("intpm0", "intpm1","intpm2","shapm0", "shapm1","shapm2","transtestdn", "transtestds", "transtestdnds", "transtestsp", "transtestmass", "transtestdifmass", "meantestdn", "meantestds", "meantestdnds", "meantestsp", "meantestmass", "meantestdifmass")

for(j in 1:100){
  
  subtdir<-sample(c(0,1), 33, replace = T)#va a muestrear 33 veces (numero de parejas) aleatoriamente los números 0 y 1
  ###creamos variables de los constrastes#
  contdn<-vector()
  contds<-vector()
  contdnds<-vector()
  contsp<-vector()
  contmass<-vector()
  contmasssexdiff<-vector()
  
  #### for each pair we do the subtraction and save the value##
  for(i in 1:33){
    if(subtdir[i]){
      contdn[i]<-(log(dnm[i])-log(dnp[i]))/(overallm[i]+overallp[i])^0.1
      contds[i]<-(log(dsm[i])-log(dsp[i]))/sqrt(overallm[i]+overallp[i])
      contdnds[i]<-(log(dndsm[i])-log(dndsp[i]))/(overallm[i]+overallp[i])^0.1
      contsp[i]<-(log(spm[i])-log(spp[i]))/(overallm[i]+overallp[i])^0.1
      contmass[i]<-(log(massmalem[i])-log(massmalep[i]))/sqrt(overallm[i]+overallp[i])
      contmasssexdiff[i]<-((log(massmalem[i])-log(massfemm[i]))-(log(massmalep[i])-log(massfemp[i])))/sqrt(overallm[i]+overallp[i])
    }else{
      contdn[i]<-(log(dnp[i])-log(dnm[i]))/(overallm[i]+overallp[i])^0.1
      contds[i]<-(log(dsp[i])-log(dsm[i]))/sqrt(overallm[i]+overallp[i])
      contdnds[i]<-(log(dndsp[i])-log(dndsm[i]))/(overallm[i]+overallp[i])^0.1
      contsp[i]<-(log(spp[i])-log(spm[i]))/(overallm[i]+overallp[i])^0.1
      contmass[i]<-(log(massmalep[i])-log(massmalem[i]))/sqrt(overallm[i]+overallp[i])
      contmasssexdiff[i]<-((log(massmalep[i])-log(massfemp[i]))-(log(massmalem[i])-log(massfemm[i])))/sqrt(overallm[i]+overallp[i])
      
    }
    
  }
  
  m0<-lm(contsp~ 0+ contdnds,  weights=meanweight)
  sh0 <- shapiro.test(residuals(m0))
  summary(m0)
  resultsmat[j,1] <- summary(m0)$coefficients[1,4]
  resultsmat[j,4] <- sh0$p.value
  
  m1<-lm(contsp~ 0+ contdn,  weights=meanweight)
  sh1 <- shapiro.test(residuals(m1))
  summary(m1)
  resultsmat[j,2] <- summary(m1)$coefficients[1,4]
  resultsmat[j,5] <- sh1$p.value
  
  m2<-lm(contsp~ 0+ contds,  weights=meanweight)
  sh2 <- shapiro.test(residuals(m2))
  summary(m2)
  resultsmat[j,3] <- summary(m2)$coefficients[1,4]
  resultsmat[j,6] <- sh2$p.value
  
  resultsmat[j,7] <- cor.test(abs(contdn),(overallm+overallp)^0.5, type="kendall", alternative = "less")$p.value
  resultsmat[j,8]<- cor.test(abs(contds),sqrt(overallm+overallp), type="kendall", alternative = "less")$p.value
  resultsmat[j,9]<- cor.test(abs(contdnds),(overallm+overallp)^0.5, type="kendall", alternative = "less")$p.value
  resultsmat[j,10]<- cor.test(abs(contsp),(overallm+overallp)^0.5, type="kendall", alternative = "less")$p.value
  resultsmat[j,11]<- cor.test(abs(contmass),sqrt(overallm+overallp), type="kendall", alternative = "less")$p.value
  resultsmat[j,12]<- cor.test(abs(contmasssexdiff),sqrt(overallm+overallp), type="kendall", alternative = "less")$p.value
  
  resultsmat[j,13]<- cor.test(abs(log(dnm)-log(dnp)),rowMeans(cbind(log(dnm),log(dnp))), type="kendall")$p.value
  resultsmat[j,14]<- cor.test(abs(log(dsm)-log(dsp)),rowMeans(cbind(log(dsm),log(dsp))), type="kendall")$p.value
  resultsmat[j,15]<- cor.test(abs(log(dndsm)-log(dndsp)),rowMeans(cbind(log(dndsm),log(dndsp))), type="kendall")$p.value
  resultsmat[j,16]<- cor.test(abs(log(spm)-log(spp)),rowMeans(cbind(log(spm),log(spp))), type="kendall")$p.value
  resultsmat[j,17]<- cor.test(abs(log(massmalep)-log(massmalem)),rowMeans(cbind(log(massmalep),log(massmalem))), type="kendall")$p.value
  resultsmat[j,18]<- cor.test(abs((log(massmalep)-log(massfemp))-(log(massmalem)-log(massfemm))),rowMeans(cbind((log(massmalep)-log(massfemp)),(log(massmalem)-log(massfemm)))), type="kendall")$p.value
}

sigprop <- apply(resultsmat, 2, function(x) length(which(x < 0.05)))
sigprop

######## 2. Wilcox test: checking if poly/mono is associated to number
# of species, molecular evolution or mass####


##non-corrected by branch legnths####

w1<- wilcox.test(spm,spp,paired=T)
w2<- wilcox.test(dnm,dnp,paired=T)
w3<- wilcox.test(dsm,dsp,paired=T)
w4<- wilcox.test(dndsm,dndsp,paired=T)
w5<- wilcox.test(rowMeans(cbind(massfemm,massmalem)),rowMeans(cbind(massfemp,massmalep)),paired=T)
w6<- wilcox.test(massmalem-massfemm, massmalep-massfemp,paired=T)

w1
w2
w3
w4
w5
w6
#@@@@@@@@@@@@@@@@@the results are the same without and with branch length 
#@@@@@@@@@@@@@@@@@correction. Below###################

#corrected by branch lengths#########
spmcor<-spm/sqrt(overallm+overallp)
sppcor<-spp/sqrt(overallm+overallp)
dnmcor<-dnm/sqrt(overallm+overallp)
dnpcor<-dnp/sqrt(overallm+overallp)
dsmcor<-dsm/sqrt(overallm+overallp)
dspcor<-dsp/sqrt(overallm+overallp)
dndsmcor<-dndsm/sqrt(overallm+overallp)
dndspcor<-dndsp/sqrt(overallm+overallp)
diffmcor<-(massmalem-massfemm)/sqrt(overallm+overallp)
diffpcor<-(massmalep-massfemp)/sqrt(overallm+overallp)
massmcor<-(rowMeans(cbind(massfemm,massmalem))/sqrt(overallm+overallp))
masspcor<-(rowMeans(cbind(massfemp,massmalep))/sqrt(overallm+overallp))

w1<- wilcox.test(spmcor,sppcor,paired=T)
w2<- wilcox.test(dnmcor,dnpcor,paired=T)
w3<- wilcox.test(dsmcor,dspcor,paired=T)
w4<- wilcox.test(dndsmcor,dndspcor,paired=T)
w5<- wilcox.test(massmcor,masspcor,paired=T)
w6<- wilcox.test(diffmcor, diffpcor,paired=T)

w1
w2
w3
w4
w5
w6


####### 3. GLM + tree (phylogenetic regression, PGLS): real analyses############

library(ape)
trs<-read.tree("C:\\Documentos Maider\\My research\\2017 ANU\\papers\\polygamy vs mol evol\\our data\\analyses\\tr33pairs.tre")
####as we had to remove a new pair due to lack in mass, we are going to cut the tree to remove that pair
trs.cut<-drop.tip(trs,c("Mionectes", "Colonia"))

data<-mitotree
attach(data)

# create poly and mono trees
trs.mono <- drop.tip(trs.cut, sp[1:32])
trs.poly <-drop.tip(trs.cut, sp[33:64])# create poly and mono trees

#variables


datpgls<- data.frame(sprich = log(data$sprich))
datpgls$mating<-as.factor(data$`mating system`)
datpgls$ds<-log(data$dsmito)
datpgls$dn<-log(data$dnmito)
datpgls$dnds<-log(data$dndsmito)
datpgls$weights_poly<-data$weights_poly
datpgls$massm<-log(data$M_mass)
datpgls$massf<-log(data$F_mass)
datpgls$diffmass<-datpgls$massm-datpgls$massf
rownames(datpgls) <- as.character(data$sp)
datpgls$massmean<-rowMeans(cbind(log(M_mass),log(F_mass)))
powerTransform(rowMeans(cbind(M_mass, F_mass)))
datpgls$massbxcx<-bcPower(rowMeans(cbind(M_mass, F_mass)),-0.184764  )


attach(datpgls)
shapiro.test(sp)
shapiro.test(ds)
shapiro.test(dn)
shapiro.test(dnds)
shapiro.test(massm)
shapiro.test(massf)
shapiro.test(massmean)

m0<-compar.gee(sprich~mating*dn*massbxcx, data = datpgls, phy=trs.cut)
m0#the 3-way interaction is significant, so split by mating system
shapiro.test(residuals(m0))

#poly
m0.1.1<-compar.gee(sprich~dn*massbxcx, data = datpgls[1:32,], phy=trs.poly)
m0.1.1
shapiro.test(residuals(m0.1.1))
#mono
m0.1.2<-compar.gee(sprich~dn*massbxcx, data = datpgls[33:64,], phy=trs.mono)
m0.1.2
shapiro.test(residuals(m0.1.2))


m0.2<-compar.gee(dn~mating*sprich*massmean, data = datpgls, phy=trs.cut)
m0.2
shapiro.test(residuals(m0.2))

m0.3<-compar.gee(dn~mating+sprich+massmean, data = datpgls, phy=trs.cut)
m0.3
shapiro.test(residuals(m0.3))

m0.4<-compar.gee(sprich~mating*dnds*massbxcx, data = datpgls, phy=trs.cut)
m0.4
shapiro.test(residuals(m0.4))

m0.5<-compar.gee(sprich~mating:dnds+massbxcx:mating+massbxcx:dnds, data = datpgls, phy=trs.cut)
m0.5
shapiro.test(residuals(m0.5))

m0.5<-compar.gee(sprich~mating*dnds, data = datpgls, phy=trs.cut)
m0.5
shapiro.test(residuals(m0.5))

m0.6<-compar.gee(dnds~mating*sprich+massmean, data = datpgls, phy=trs.cut)
m0.6
shapiro.test(residuals(m0.6))

m0.7<-compar.gee(dnds~mating+sprich, data = datpgls, phy=trs.cut)
m0.7
shapiro.test(residuals(m0.7))

m0.8<-compar.gee(sprich~mating*ds+massmean, data = datpgls, phy=trs.cut)
m0.8
shapiro.test(residuals(m0.8))

m0.9<-compar.gee(sprich~mating+ds+massmean, data = datpgls, phy=trs.cut)
m0.9
shapiro.test(residuals(m0.9))

m0.10<-compar.gee(ds~matings*sprich+massmean, data = datpgls, phy=trs.cut)
m0.10
shapiro.test(residuals(m0.10))

m0.11<-compar.gee(ds~matings+sprich, data = datpgls, phy=trs.cut)
m0.11
shapiro.test(residuals(m0.11))


m1<-compar.gee(dn~mating, data = datpgls, phy=trs.cut)
m1
shapiro.test(residuals(m1))

m2<-compar.gee(dnds~mating, data = datpgls, phy=trs.cut)
m2
shapiro.test(residuals(m2))

m3<-compar.gee(ds~mating, data = datpgls, phy=trs.cut)
m3
shapiro.test(residuals(m3))

m5<-compar.gee(sprich~mating, data = datpgls, phy=trs.cut)
m5
shapiro.test(residuals(m5))

m6<-compar.gee(dn~massmean, data = datpgls, phy=trs.cut)
m6
shapiro.test(residuals(m6))

m7<-compar.gee(ds~massmean, data = datpgls, phy=trs.cut)
m7
shapiro.test(residuals(m7))

m8<-compar.gee(dnds~massmean, data = datpgls, phy=trs.cut)
m8
shapiro.test(residuals(m8))

m10<-compar.gee(sprich~massmean, data = datpgls, phy=trs.cut)
m10
shapiro.test(residuals(m10))

m11<-compar.gee(massbxcx~mating, data = datpgls, phy=trs.cut)
m11
shapiro.test(residuals(m11))
hist(residuals(m11))
hist(massbxcx)

m12<-compar.gee(sprich~dn, data = datpgls, phy=trs.cut)
m12
shapiro.test(residuals(m12))

m13<-compar.gee(sprich~dnds, data = datpgls, phy=trs.cut)
m13
shapiro.test(residuals(m13))

m14<-compar.gee(sprich~ds, data = datpgls, phy=trs.cut)
m14
shapiro.test(residuals(m14))
