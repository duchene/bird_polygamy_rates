#################################################################################
####Does polyandry lead to more speciation due to higher rates of molecular
#evolution? Birds##########################################################


#####analyses with Molecular tree  branch lengths for correction of variables and phylo non-independence

#The following reads a data set in MIGs PC.
#datpoly<-read.csv("C:/Documentos Maider/My research/2017 ANU/papers/polygamy vs mol evol/our data/analyses/dat_mig_66paired_molcut_081017.csv")

#The following reads a data set in DADs mac.
dat_mig_66paired_molcut_101017<-read.csv("dat_mig_66paired_molcut_101017.csv")


str(dat_mig_66paired_molcut_101017)
data<-dat_mig_66paired_molcut_101017[-c(1, 22),]
attach(data)

#variables

spm<-data$sprich_mono
spp<-data$sprich_poly
dsm<-data$dsmito_mono
dsp<-data$dsmito_poly
dnm<-data$dnmito_mono
dnp<-data$dnmito_poly
dndsm<-data$dndsmito_mono
dndsp<-data$dndsmito_poly
overallm<-data$overallmol_mono
overallp<-data$overallmol_poly
massmalem<-data$M_mass_mono
massmalep<-data$M_mass_poly
massfemm<-data$F_mass_mono
massfemp<-data$F_mass_poly
massm <- rowMeans(cbind(massmalem, massfemm))
massp <- rowMeans(cbind(massmalep, massfemp))

meanweight<- rowMeans(cbind(data$weights_poly,data$weights_mono))

######### 1. Independent contrasts regression to test whether there is an association 
#between speciation, molecular evolution and body mass#####

## To randomize the direction of the comparison between variables in sisters##
### =subtraction direction######


### we need to create a table with severl results 100 times, to check whether
###the trasnformation done for the variables related to the branch length
###(See sqrt of overall below), is correlated with the difference between mono and poly
### in each variable. If they are correlated, we need to use a different trasnformation 
### of the varibles in relation to branch lenght.


#@also, we have to check if the absolute difference is correlated to the mean of each variable

# The following matrix has the results for the model, then the tests for normality etc.

resultsmat <- matrix(NA, nrow = 100, ncol = 48)
colnames(resultsmat) <- c(paste0("paramsig", 0:17), paste0("modshapsig", 0:17),"transtestdn", "transtestds", "transtestdnds", "transtestsp", "transtestmass", "transtestdifmass", "meantestdn", "meantestds", "meantestdnds", "meantestsp", "meantestmass", "meantestdifmass")

for(j in 1:100){
  
  subtdir<-sample(c(0,1), 31, replace = T)#va a muestrear 33 veces (numero de parejas) aleatoriamente los números 0 y 1
  ###creamos variables de los constrastes#
  contdn<-vector()
  contds<-vector()
  contdnds<-vector()
  contsp<-vector()
  contmass<-vector()
  contmasssexdiff<-vector()
  
  #### for each pair we do the subtraction and save the value##
  for(i in 1:31){
    if(subtdir[i]){
      contdn[i]<-(log(dnm[i])-log(dnp[i]))/(overallm[i]+overallp[i])^0.1
      contds[i]<-(log(dsm[i])-log(dsp[i]))/(overallm[i]+overallp[i])^0.1
      contdnds[i]<-(log(dndsm[i])-log(dndsp[i]))/(overallm[i]+overallp[i])^0.1
      contsp[i]<-(log(spm[i])-log(spp[i]))/(overallm[i]+overallp[i])^0.1
      contmass[i]<-(log(massm[i])-log(massp[i]))/(overallm[i]+overallp[i])^0.1
      contmasssexdiff[i]<-((log(massmalem[i])-log(massfemm[i]))-(log(massmalep[i])-log(massfemp[i])))/(overallm[i]+overallp[i])^0.1
    }else{
      contdn[i]<-(log(dnp[i])-log(dnm[i]))/(overallm[i]+overallp[i])^0.1
      contds[i]<-(log(dsp[i])-log(dsm[i]))/(overallm[i]+overallp[i])^0.1
      contdnds[i]<-(log(dndsp[i])-log(dndsm[i]))/(overallm[i]+overallp[i])^0.1
      contsp[i]<-(log(spp[i])-log(spm[i]))/(overallm[i]+overallp[i])^0.1
      contmass[i]<-(log(massp[i])-log(massm[i]))/(overallm[i]+overallp[i])^0.1
      contmasssexdiff[i]<-((log(massmalep[i])-log(massfemp[i]))-(log(massmalem[i])-log(massfemm[i])))/(overallm[i]+overallp[i])^0.1
      
    }
    
  }
  
  ##The following are single variable models
  
  m0<-lm(contsp~ 0+ contdnds,  weights=meanweight)
  sh0 <- shapiro.test(residuals(m0))
  resultsmat[j,1] <- summary(m0)$coefficients[1,4]
  resultsmat[j,19] <- sh0$p.value
  
  m1<-lm(contsp~ 0+ contdn,  weights=meanweight)
  sh1 <- shapiro.test(residuals(m1))
  resultsmat[j,2] <- summary(m1)$coefficients[1,4]
  resultsmat[j,20] <- sh1$p.value
  
  m2<-lm(contsp~ 0+ contds,  weights=meanweight)
  sh2 <- shapiro.test(residuals(m2))
  resultsmat[j,3] <- summary(m2)$coefficients[1,4]
  resultsmat[j,21] <- sh2$p.value
  
  m3<-lm(contsp~ 0+ contmass,  weights=meanweight)
  sh3 <- shapiro.test(residuals(m3))
  resultsmat[j,4] <- summary(m3)$coefficients[1,4]
  resultsmat[j,22] <- sh3$p.value
  
  m4<-lm(contsp~ 0+ contmasssexdiff,  weights=meanweight)
  sh4 <- shapiro.test(residuals(m4))
  resultsmat[j,5] <- summary(m4)$coefficients[1,4]
  resultsmat[j,23] <- sh4$p.value
  
  m5<-lm(contdnds~ 0+ contmass,  weights=meanweight)
  sh5 <- shapiro.test(residuals(m5))
  resultsmat[j,6] <- summary(m5)$coefficients[1,4]
  resultsmat[j,24] <- sh5$p.value
  
  m6<-lm(contdn~ 0+ contmass,  weights=meanweight)
  sh6 <- shapiro.test(residuals(m6))
  resultsmat[j,7] <- summary(m6)$coefficients[1,4]
  resultsmat[j,25] <- sh6$p.value
  
  m7<-lm(contds~ 0+ contmass,  weights=meanweight)
  sh7 <- shapiro.test(residuals(m7))
  resultsmat[j,8] <- summary(m7)$coefficients[1,4]
  resultsmat[j,26] <- sh7$p.value
  
  m8<-lm(contmasssexdiff~ 0+ contmass,  weights=meanweight)
  sh8 <- shapiro.test(residuals(m8))
  resultsmat[j,9] <- summary(m8)$coefficients[1,4]
  resultsmat[j,27] <- sh8$p.value
  
  m9<-lm(contdnds~ 0+ contmasssexdiff,  weights=meanweight)
  sh9 <- shapiro.test(residuals(m9))
  resultsmat[j,10] <- summary(m9)$coefficients[1,4]
  resultsmat[j,28] <- sh9$p.value
  
  m10<-lm(contdn~ 0+ contmasssexdiff,  weights=meanweight)
  sh10 <- shapiro.test(residuals(m10))
  resultsmat[j,11] <- summary(m10)$coefficients[1,4]
  resultsmat[j,29] <- sh10$p.value
  
  m11<-lm(contds~ 0+ contmasssexdiff,  weights=meanweight)
  sh11 <- shapiro.test(residuals(m11))
  resultsmat[j,12] <- summary(m11)$coefficients[1,4]
  resultsmat[j,30] <- sh11$p.value

  ##The following are multivariate models
    
  m12<-lm(contsp~ 0+ contdnds+contmass,  weights=meanweight)
  sh12 <- shapiro.test(residuals(m12))
  resultsmat[j,13] <- summary(m12)$coefficients[1,4]
  resultsmat[j,31] <- sh12$p.value
  
  m13<-lm(contsp~ 0+ contdn+contmass,  weights=meanweight)
  sh13 <- shapiro.test(residuals(m13))
  resultsmat[j,14] <- summary(m13)$coefficients[1,4]
  resultsmat[j,32] <- sh13$p.value
  
  m14<-lm(contsp~ 0+ contds+contmass,  weights=meanweight)
  sh14 <- shapiro.test(residuals(m14))
  resultsmat[j,15] <- summary(m14)$coefficients[1,4]
  resultsmat[j,33] <- sh14$p.value
  
  m15<-lm(contdnds~ 0+ contsp+contmass,  weights=meanweight)
  sh15 <- shapiro.test(residuals(m15))
  resultsmat[j,16] <- summary(m15)$coefficients[1,4]
  resultsmat[j,34] <- sh15$p.value
  
  m16<-lm(contdn~ 0+ contsp+contmass,  weights=meanweight)
  sh16 <- shapiro.test(residuals(m16))
  resultsmat[j,17] <- summary(m16)$coefficients[1,4]
  resultsmat[j,35] <- sh16$p.value
  
  m17<-lm(contds~ 0+ contsp+contmass,  weights=meanweight)
  sh17 <- shapiro.test(residuals(m17))
  resultsmat[j,18] <- summary(m17)$coefficients[1,4]
  resultsmat[j,36] <- sh17$p.value
  
  resultsmat[j,37] <- cor.test(abs(contdn),(overallm+overallp)^0.1, type="kendall", alternative = "less")$p.value
  resultsmat[j,38]<- cor.test(abs(contds),(overallm+overallp)^0.1, type="kendall", alternative = "less")$p.value
  resultsmat[j,39]<- cor.test(abs(contdnds),(overallm+overallp)^0.1, type="kendall", alternative = "less")$p.value
  resultsmat[j,40]<- cor.test(abs(contsp),(overallm+overallp)^0.1, type="kendall", alternative = "less")$p.value
  resultsmat[j,41]<- cor.test(abs(contmass),(overallm+overallp)^0.1, type="kendall", alternative = "less")$p.value
  resultsmat[j,42]<- cor.test(abs(contmasssexdiff),(overallm+overallp)^0.1, type="kendall", alternative = "less")$p.value
  
  resultsmat[j,43]<- cor.test(abs(log(dnm)-log(dnp)),rowMeans(cbind(log(dnm),log(dnp))), type="kendall")$p.value
  resultsmat[j,44]<- cor.test(abs(log(dsm)-log(dsp)),rowMeans(cbind(log(dsm),log(dsp))), type="kendall")$p.value
  resultsmat[j,45]<- cor.test(abs(log(dndsm)-log(dndsp)),rowMeans(cbind(log(dndsm),log(dndsp))), type="kendall")$p.value
  resultsmat[j,46]<- cor.test(abs(log(spm)-log(spp)),rowMeans(cbind(log(spm),log(spp))), type="kendall")$p.value
  resultsmat[j,47]<- cor.test(abs(log(massp)-log(massm)),rowMeans(cbind(log(massp),log(massm))), type="kendall")$p.value
  resultsmat[j,48]<- cor.test(abs((log(massmalep)-log(massfemp))-(log(massmalem)-log(massfemm))),rowMeans(cbind((log(massmalep)-log(massfemp)),(log(massmalem)-log(massfemm)))), type="kendall")$p.value
}

sigprop <- apply(resultsmat, 2, function(x) length(which(x < 0.05)))
sigprop
